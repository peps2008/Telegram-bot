import telebot
from telebot import types
from replit import db
import datetime
from dateutil.relativedelta import relativedelta
import os
import sys
import logging
import queue
import threading
from functools import lru_cache
from typing import Dict, List, Union, Optional
from collections import defaultdict
import time
import pytesseract # Added for Tesseract OCR
from PIL import Image # Added for Tesseract OCR
import io # Added for Tesseract OCR


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Settings
TOKEN = os.environ['BOT_TOKEN']

# –û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π
message_queue = queue.Queue()
# –ö—ç—à –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
cache = defaultdict(dict)
CACHE_TIMEOUT = 300  # 5 –º–∏–Ω—É—Ç

def clear_expired_cache():
    """–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞"""
    current_time = time.time()
    expired_keys = [k for k, v in cache.items() 
                   if current_time - v.get('timestamp', 0) > CACHE_TIMEOUT]
    for k in expired_keys:
        del cache[k]

def process_message_queue():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
    while True:
        try:
            message = message_queue.get()
            if message is None:
                break
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            func, args = message
            func(*args)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
        finally:
            message_queue.task_done()

# –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏
message_thread = threading.Thread(target=process_message_queue, daemon=True)
message_thread.start()
CREDIT_AMOUNT = 1_500_000
INTEREST_RATE = 10
TERM_MONTHS = 12  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ –≤ –º–µ—Å—è—Ü–∞—Ö

# Russian holidays (month, day)
HOLIDAYS = [
    (1, 1), (1, 2), (1, 7), (2, 23), (3, 8), 
    (5, 1), (5, 9), (6, 12), (11, 4)
]

bot = telebot.TeleBot(TOKEN)

def is_holiday(date):
    """Check if date is a holiday or weekend"""
    if date.weekday() >= 5:  # Saturday or Sunday
        return True
    return (date.month, date.day) in HOLIDAYS

def get_previous_workday(date):
    """Returns last working day before given date"""
    while True:
        date -= datetime.timedelta(days=1)
        if not is_holiday(date):
            return date

def create_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        types.KeyboardButton("üìä –ì—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π"),
        types.KeyboardButton("üí∏ –í–Ω–µ—Å—Ç–∏ –ø–ª–∞—Ç—ë–∂"),
        types.KeyboardButton("‚ôªÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏"),
        types.KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—Ä–µ–¥–∏—Ç–∞"),
        types.KeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"),
        types.KeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫")
    ]
    keyboard.add(*buttons)
    return keyboard

@bot.message_handler(func=lambda m: m.text == "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫")
def restart_bot(message):
    if str(message.chat.id) != "1175871225":  # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        bot.reply_to(message, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.")
        return

    bot.reply_to(message, "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    start(message)  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é start
    os.execv(sys.executable, ['python'] + sys.argv)

@bot.message_handler(commands=['setname'])
def set_user_name(message):
    if str(message.chat.id) != "1175871225":  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        bot.reply_to(message, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–º—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    args = message.text.split(maxsplit=2)
    if len(args) != 3:
        bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setname ID –ò–º—è\n–ü—Ä–∏–º–µ—Ä: /setname 123456789 –ò–≤–∞–Ω")
        return

    try:
        user_id = args[1]
        name = args[2]
        if "user_names" not in db:
            db["user_names"] = {}
        db["user_names"][user_id] = name
        bot.reply_to(message, f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è *{name}* –¥–ª—è ID: `{user_id}`", parse_mode="Markdown")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(commands=['names'])
def show_user_names(message):
    if str(message.chat.id) != "1175871225":  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        bot.reply_to(message, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–º—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    if "user_names" not in db or not db["user_names"]:
        bot.reply_to(message, "üìã –°–ø–∏—Å–æ–∫ –∏–º—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
        return

    names_list = "\n".join([f"‚Ä¢ `{user_id}`: *{name}*" for user_id, name in db["user_names"].items()])
    bot.reply_to(message, f"üìã *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n\n{names_list}", parse_mode="Markdown")

@bot.message_handler(func=lambda m: m.text == "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
def notification_settings(message):
    if str(message.chat.id) != "1175871225":  # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        bot.reply_to(message, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        return

    bot.send_message(
        message.chat.id,
        "*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:*",
        parse_mode="Markdown",
        reply_markup=create_management_keyboard()
    )

@bot.message_handler(func=lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è")
def add_notification_recipient(message):
    if str(message.chat.id) != "1175871225":  # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        bot.reply_to(message, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏.")
        return

    msg = bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø–æ–ª—É—á–∞—Ç–µ–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:")
    bot.register_next_step_handler(msg, process_add_recipient)

@bot.message_handler(func=lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–≥–æ")
def add_payment_approver(message):
    if str(message.chat.id) != "1175871225":  # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        bot.reply_to(message, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–º–∏.")
        return

    msg = bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–µ:")
    bot.register_next_step_handler(msg, process_add_approver)

def process_add_approver(message):
    try:
        user_id = str(int(message.text))
        approvers = db.get("payment_approvers", [])

        if user_id in approvers:
            bot.reply_to(message, "‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–º!")
            return

        approvers.append(user_id)
        db["payment_approvers"] = approvers
        bot.reply_to(message, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏—Ö!")
    except ValueError:
        bot.reply_to(message, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")

@bot.message_handler(func=lambda m: m.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–≥–æ")
def remove_payment_approver(message):
    if str(message.chat.id) != "1175871225":  # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        bot.reply_to(message, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–º–∏.")
        return

    msg = bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏—Ö:")
    bot.register_next_step_handler(msg, process_remove_approver)

def process_remove_approver(message):
    try:
        user_id = str(int(message.text))
        approvers = db.get("payment_approvers", [])

        if user_id not in approvers:
            bot.reply_to(message, "‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–º!")
            return

        approvers.remove(user_id)
        db["payment_approvers"] = approvers
        bot.reply_to(message, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏—Ö!")
    except ValueError:
        bot.reply_to(message, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")

@bot.message_handler(func=lambda m: m.text == "üìã –°–ø–∏—Å–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏—Ö")
def list_payment_approvers(message):
    if str(message.chat.id) != "1175871225":  # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        bot.reply_to(message, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏—Ö.")
        return

    approvers = db.get("payment_approvers", [])
    if not approvers:
        bot.reply_to(message, "üìã –°–ø–∏—Å–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏—Ö –ø—É—Å—Ç!")
        return

    approvers_list = "\n".join([f"‚Ä¢ ID: `{user_id}` - *{get_user_name(user_id)}*" for user_id in approvers])
    bot.reply_to(message, f"üìã *–°–ø–∏—Å–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏—Ö:*\n\n{approvers_list}", parse_mode="Markdown")

def process_add_recipient(message):
    try:
        user_id = str(int(message.text))  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID —á–∏—Å–ª–æ–≤–æ–π
        notify_users = db.get("notify_users", [])

        if user_id in notify_users:
            bot.reply_to(message, "‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!")
            return

        notify_users.append(user_id)
        db["notify_users"] = notify_users
        bot.reply_to(message, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!")
    except ValueError:
        bot.reply_to(message, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")

@bot.message_handler(func=lambda m: m.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è")
def remove_notification_recipient(message):
    if str(message.chat.id) != "1175871225":  # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        bot.reply_to(message, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏.")
        return

    msg = bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    bot.register_next_step_handler(msg, process_remove_recipient)

def process_remove_recipient(message):
    try:
        user_id = str(int(message.text))
        notify_users = db.get("notify_users", [])

        if user_id not in notify_users:
            bot.reply_to(message, "‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!")
            return

        notify_users.remove(user_id)
        db["notify_users"] = notify_users
        bot.reply_to(message, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!")
    except ValueError:
        bot.reply_to(message, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")

@bot.message_handler(func=lambda m: m.text == "‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
def back_to_menu(message):
    bot.send_message(message.chat.id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=create_keyboard())

@bot.message_handler(func=lambda m: m.text == "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π")
def list_notification_recipients(message):
    if str(message.chat.id) != "1175871225":  # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        bot.reply_to(message, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
        return

    notify_users = db.get("notify_users", [])
    if not notify_users:
        bot.reply_to(message, "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—É—Å—Ç!")
        return

    markup = types.InlineKeyboardMarkup(row_width=1)
    for user_id in notify_users:
        user_name = get_user_name(user_id)
        name_button = types.InlineKeyboardButton(
            f"‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è: {user_name} (ID: {user_id})",
            callback_data=f"setname_{user_id}"
        )
        markup.add(name_button)

    recipients_list = "\n".join([
        f"‚Ä¢ ID: `{user_id}` - *{get_user_name(user_id)}*" 
        for user_id in notify_users
    ])
    bot.reply_to(
        message, 
        f"üìã *–°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:*\n\n{recipients_list}\n\n_–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏_",
        parse_mode="Markdown",
        reply_markup=markup
    )

def check_notifications():
    """Check if notifications need to be sent"""
    today = datetime.datetime.now().date()
    next_month = today + relativedelta(months=1)
    notification_date = datetime.date(next_month.year, next_month.month, 8)

    if is_holiday(notification_date):
        notification_date = get_previous_workday(notification_date)

    if today == notification_date:
        for user_id in db.get("users", {}):
            if db["users"][user_id].get("notify", False):
                try:
                    bot.send_message(
                        int(user_id),  # Convert string ID to integer
                        "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Å–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç—ë–∂ —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π!\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /show –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥—Ä–∞—Ñ–∏–∫–∞",
                        reply_markup=create_keyboard()
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

@bot.message_handler(commands=['id'])
def show_id(message):
    bot.reply_to(message, f"üÜî –í–∞—à ID: `{message.chat.id}`", parse_mode="Markdown")

@bot.message_handler(commands=['start'])
def start(message):
    # Initialize database
    if "payments" not in db:
        db["payments"] = {}
    if "users" not in db:
        db["users"] = {}
    if "params" not in db:
        db["params"] = {
            "amount": CREDIT_AMOUNT,
            "rate": INTEREST_RATE,
            "term": TERM_MONTHS,
            "payment_date": 8
        }
    if "payment_approvers" not in db:
        db["payment_approvers"] = []


    # Register user
    user_id = str(message.chat.id)
    if user_id not in db["users"]:
        db["users"][user_id] = {"notify": True}

    text = """
üè¶ *–ö–†–ï–î–ò–¢–ù–´–ô –ê–°–°–ò–°–¢–ï–ù–¢* üè¶

üì± *–î–û–°–¢–£–ü–ù–´–ï –§–£–ù–ö–¶–ò–ò:*

üìä *–ì—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π*
‚îî –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–∏—Ö –∏ –±—É–¥—É—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π
‚îî –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –æ—Å—Ç–∞—Ç–∫–∞
‚îî –ò—Å—Ç–æ—Ä–∏—è –≤–Ω–µ—Å–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π

üí∏ *–í–Ω–µ—Å–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π*
‚îî –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂: 30 000 ‚ÇΩ
‚îî –î–≤–æ–π–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
‚îî –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤

‚öôÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ–º*
‚îî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—É–º–º—ã –∏ —Å—Ç–∞–≤–∫–∏
‚îî –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ –∫—Ä–µ–¥–∏—Ç–∞
‚îî –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞—Ç—ã –ø–ª–∞—Ç–µ–∂–∞

üë• *–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*
‚îî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 7 –¥–Ω–µ–π
‚îî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–∞—Ö
‚îî –ì–∏–±–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π

*–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ* ‚§µÔ∏è
"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    keyboard = create_admin_keyboard() if str(message.chat.id) == "1175871225" else create_user_keyboard()

    bot.send_message(message.chat.id, text, 
                   parse_mode="Markdown",
                   reply_markup=keyboard)



@bot.message_handler(func=lambda m: m.text == "üí∞ –í–Ω–µ—Å—Ç–∏ –ø–ª–∞—Ç—ë–∂")
def handle_payment(message):
    if str(message.chat.id) != "1175871225":  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        bot.reply_to(message, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π.")
        return
    params = db["params"]
    # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –º–µ—Å—è—Ü
    next_month = 1
    while str(next_month) in db["payments"] and next_month <= params["term"]:
        next_month += 1

    if next_month > params["term"]:
        bot.reply_to(message, "‚úÖ –í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ —É–∂–µ –≤–Ω–µ—Å–µ–Ω—ã!", parse_mode="Markdown")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    cancel_button = types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")
    keyboard.add(cancel_button)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—è—Ü –∏ –≥–æ–¥ –ø–ª–∞—Ç–µ–∂–∞
    current_date = datetime.datetime.now() + relativedelta(months=next_month-1)
    months = ['—è–Ω–≤–∞—Ä—å', '—Ñ–µ–≤—Ä–∞–ª—å', '–º–∞—Ä—Ç', '–∞–ø—Ä–µ–ª—å', '–º–∞–π', '–∏—é–Ω—å',
              '–∏—é–ª—å', '–∞–≤–≥—É—Å—Ç', '—Å–µ–Ω—Ç—è–±—Ä—å', '–æ–∫—Ç—è–±—Ä—å', '–Ω–æ—è–±—Ä—å', '–¥–µ–∫–∞–±—Ä—å']
    month_name = months[current_date.month - 1]

    msg = bot.reply_to(
        message, 
        f"üí∞ *–ü–ª–∞—Ç—ë–∂ –∑–∞ {month_name} {current_date.year}*\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞ (–º–∏–Ω–∏–º—É–º 30 000 —Ä—É–±.):\n\n_–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚ùå –û—Ç–º–µ–Ω–∞_",
        parse_mode="Markdown",
        reply_markup=keyboard
    )
    bot.register_next_step_handler(msg, process_payment_amount, next_month)

@lru_cache(maxsize=128)
def get_cached_data(key: str, timeout: int = CACHE_TIMEOUT) -> Optional[dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞"""
    if key in cache and time.time() - cache[key].get('timestamp', 0) < timeout:
        return cache[key].get('data')
    return None

def set_cached_data(key: str, data: dict) -> None:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à"""
    cache[key] = {
        'data': data,
        'timestamp': time.time()
    }

def calculate_monthly_payment(principal: float, annual_rate: float, months: int) -> float:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–æ—Ä–º—É–ª—É –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–∏
    —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    """
    cache_key = f"payment_{principal}_{annual_rate}_{months}"
    cached_result = get_cached_data(cache_key)
    if cached_result:
        return cached_result['payment']

    try:
        monthly_rate = (annual_rate / 100) / 12
        if months <= 0:
            return 0
        payment = principal * (monthly_rate * (1 + monthly_rate)**months) / ((1 + monthly_rate)**months - 1)
        result = round(payment, 2)
        set_cached_data(cache_key, {'payment': result})
        return result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        return 0

def process_payment_amount(message, month):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        bot.send_message(message.chat.id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=create_keyboard())
        return

    params = db["params"]
    try:
        amount = int(message.text)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        if "pending_payments" not in db:
            db["pending_payments"] = {}

        payment_id = f"{message.chat.id}_{month}"
        db["pending_payments"][payment_id] = {
            "amount": amount,
            "month": month,
            "from_user": message.chat.id,
            "status": "pending"
        }
        # –†–∞—Å—á–µ—Ç –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –¥–æ–ª–≥–∞
        balance = params["amount"]
        total_interest = 0
        for m in range(1, month):
            if str(m) in db["payments"]:
                payment = db["payments"][str(m)]
                interest = (balance * params["rate"] / 100) / 12
                total_interest += interest
                balance = balance - (payment - interest)

        # –†–∞—Å—á–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        remaining_months = params["term"] - month + 1
        monthly_payment = calculate_monthly_payment(balance, params["rate"], remaining_months)
        monthly_interest = (balance * params["rate"] / 100) / 12

        min_payment = 30_000  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂
        max_payment = balance + monthly_interest

        if not min_payment <= amount <= max_payment:
            msg = bot.reply_to(
                message, 
                f"‚ö†Ô∏è –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å:\n‚Ä¢ –ú–∏–Ω–∏–º—É–º: *{min_payment:,.0f}* —Ä—É–±.\n‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: *{max_payment:,.0f}* —Ä—É–±.\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–Ω–æ–≤–∞:", 
                parse_mode="Markdown"
            )
            bot.register_next_step_handler(msg, process_payment_amount, month)
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        payment_approvers = db.get("payment_approvers", [])
        if not payment_approvers:
            bot.reply_to(message, "‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞!")
            return

        payment_id = f"{message.chat.id}_{month}"

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—è—Ü –∏ –≥–æ–¥ –ø–ª–∞—Ç–µ–∂–∞
        current_date = datetime.datetime.now() + relativedelta(months=month-1)
        months = ['—è–Ω–≤–∞—Ä—å', '—Ñ–µ–≤—Ä–∞–ª—å', '–º–∞—Ä—Ç', '–∞–ø—Ä–µ–ª—å', '–º–∞–π', '–∏—é–Ω—å',
                  '–∏—é–ª—å', '–∞–≤–≥—É—Å—Ç', '—Å–µ–Ω—Ç—è–±—Ä—å', '–æ–∫—Ç—è–±—Ä—å', '–Ω–æ—è–±—Ä—å', '–¥–µ–∫–∞–±—Ä—å']
        month_name = months[current_date.month - 1]

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        sender_text = (
            "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n"
            "‚ïë   üí´ –ü–õ–ê–¢–Å–ñ –û–¢–ü–†–ê–í–õ–ï–ù   ‚ïë\n"
            "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n"
            "üìä *–î–ï–¢–ê–õ–ò –ü–õ–ê–¢–ï–ñ–ê:*\n"
            f"‚îú‚îÄüí∞ –°—É–º–º–∞: *{amount:,}* ‚ÇΩ\n"
            f"‚îú‚îÄüìÖ –ü–µ—Ä–∏–æ–¥: *{month_name} {current_date.year}*\n"
            f"‚îî‚îÄüìà –ü–ª–∞—Ç—ë–∂ ‚Ññ*{month}* –∏–∑ {params['term']}\n\n"
            "‚è≥ *–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...*"
        )
        bot.reply_to(message, sender_text, parse_mode="Markdown")

        for approver_id in payment_approvers:
            markup = types.InlineKeyboardMarkup()
            approve_button = types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_{payment_id}")
            reject_button = types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{payment_id}")
            markup.add(approve_button, reject_button)

            # –†–∞—Å—á–µ—Ç –æ—Å—Ç–∞—Ç–∫–∞ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–≥–æ
            cur_balance = params["amount"]
            total_interest = 0
            for m in range(1, month):
                if str(m) in db["payments"]:
                    payment = db["payments"][str(m)]
                    interest = (cur_balance * params["rate"] / 100) / 12
                    total_interest += interest
                    cur_balance = cur_balance - (payment - interest)

            current_interest = (cur_balance * params["rate"] / 100) / 12
            new_balance = cur_balance - (amount - current_interest)

            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–≥–æ
            confirmation_text = (
                f"üí∞ *–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞*\n\n"
                f"*–î–µ—Ç–∞–ª–∏ –ø–ª–∞—Ç–µ–∂–∞:*\n"
                f"‚Ä¢ –ú–µ—Å—è—Ü: *{month_name} {current_date.year}*\n"
                f"‚Ä¢ –ù–æ–º–µ—Ä –ø–ª–∞—Ç–µ–∂–∞: *{month}* –∏–∑ {params['term']}\n"
                f"‚Ä¢ –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: *{amount:,}* —Ä—É–±.\n"
                f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç—ã: *{current_interest:,.2f}* —Ä—É–±.\n"
                f"‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π –¥–æ–ª–≥: *{(amount - current_interest):,.2f}* —Ä—É–±.\n\n"
                f"‚Ä¢ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `{message.chat.id}`" + (f" (*{db.get('user_names', {}).get(str(message.chat.id), '–ë–µ–∑ –∏–º–µ–Ω–∏')}*)" if db.get('user_names', {}).get(str(message.chat.id)) else "") + "\n\n"
                f"*–ò—Ç–æ–≥–æ –ø–æ—Å–ª–µ –ø–ª–∞—Ç–µ–∂–∞:*\n"
                f"‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞: *{new_balance:,.2f}* —Ä—É–±.\n"
                f"‚Ä¢ –í–Ω–µ—Å–µ–Ω–æ –ø–ª–∞—Ç–µ–∂–µ–π: *{sum(db['payments'].values()) + amount:,}* —Ä—É–±.\n\n"
                f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –ø–ª–∞—Ç—ë–∂:"
            )

            try:
                bot.send_message(int(approver_id), confirmation_text, reply_markup=markup, parse_mode="Markdown")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
        return

        # –†–∞—Å—á–µ—Ç –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –¥–æ–ª–≥–∞
        params = db["params"]
        balance = params["amount"]
        paid_months = 0
        for m in range(1, params["term"] + 1):
            if str(m) in db["payments"]:
                paid_months += 1
                payment = db["payments"][str(m)]
                interest = (balance * params["rate"] / 100) / 12
                balance = balance - (payment - interest)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—è—Ü –∏ –≥–æ–¥ –ø–ª–∞—Ç–µ–∂–∞
        current_date = datetime.datetime.now() + relativedelta(months=month-1)
        months = ['—è–Ω–≤–∞—Ä—å', '—Ñ–µ–≤—Ä–∞–ª—å', '–º–∞—Ä—Ç', '–∞–ø—Ä–µ–ª—å', '–º–∞–π', '–∏—é–Ω—å',
                  '–∏—é–ª—å', '–∞–≤–≥—É—Å—Ç', '—Å–µ–Ω—Ç—è–±—Ä—å', '–æ–∫—Ç—è–±—Ä—å', '–Ω–æ—è–±—Ä—å', '–¥–µ–∫–∞–±—Ä—å']
        month_name = months[current_date.month - 1]

        notification = (
            f"üí∞ *–ù–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂ –≤–Ω–µ—Å–µ–Ω!*\n\n"
            f"‚Ä¢ –ú–µ—Å—è—Ü: *{month_name} {current_date.year}*\n"
            f"‚Ä¢ –ù–æ–º–µ—Ä –ø–ª–∞—Ç–µ–∂–∞: *{paid_months}* –∏–∑ {params['term']}\n"
            f"‚Ä¢ –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: *{amount:,}* —Ä—É–±.\n"
            f"‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞: *{balance:,.2f}* —Ä—É–±."
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        notify_users = db.get("notify_users", [])
        for user_id in notify_users:
            try:
                bot.send_message(int(user_id), notification, parse_mode="Markdown")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        bot.reply_to(message, notification, parse_mode="Markdown")

    except ValueError:
        msg = bot.reply_to(message, "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:", parse_mode="Markdown")
        bot.register_next_step_handler(msg, process_payment_amount, month)

@bot.message_handler(commands=['show'])
@bot.message_handler(func=lambda m: m.text == "üìä –ì—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π")
def show_schedule_button(message):
    show(message)

@lru_cache(maxsize=128)
def calculate_schedule(params: tuple, payments: tuple) -> str:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    params: –∫–æ—Ä—Ç–µ–∂ –ø–∞—Ä (–∫–ª—é—á, –∑–Ω–∞—á–µ–Ω–∏–µ) –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫—Ä–µ–¥–∏—Ç–∞
    payments: –∫–æ—Ä—Ç–µ–∂ –ø–∞—Ä (–∫–ª—é—á, –∑–Ω–∞—á–µ–Ω–∏–µ) —É–∂–µ –≤–Ω–µ—Å–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
    """
    params_dict = dict(params)
    payments_dict = dict(payments)

    months = ['—è–Ω–≤–∞—Ä—å', '—Ñ–µ–≤—Ä–∞–ª—å', '–º–∞—Ä—Ç', '–∞–ø—Ä–µ–ª—å', '–º–∞–π', '–∏—é–Ω—å',
              '–∏—é–ª—å', '–∞–≤–≥—É—Å—Ç', '—Å–µ–Ω—Ç—è–±—Ä—å', '–æ–∫—Ç—è–±—Ä—å', '–Ω–æ—è–±—Ä—å', '–¥–µ–∫–∞–±—Ä—å']

    response = (
        "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n"
        "‚ïë   üè¶ *–ö–†–ï–î–ò–¢ –ò–ù–§–û*   ‚ïë\n"
        "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n"
        "üìä *–û–°–ù–û–í–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´:*\n"
        f"‚îú‚îÄüí∞ –°—É–º–º–∞: *{params_dict['amount']:,}* ‚ÇΩ\n"
        f"‚îú‚îÄ‚è≥ –°—Ä–æ–∫: *{params_dict['term']}* –º–µ—Å.\n"
        f"‚îî‚îÄüìà –°—Ç–∞–≤–∫–∞: *{params_dict['rate']}%*\n\n"
        "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n"
        "‚ïë  üìÖ *–ì–†–ê–§–ò–ö –ü–õ–ê–¢–ï–ñ–ï–ô* ‚ïë\n"
        "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n"
    )

    start_date = datetime.datetime.now()
    month_count = 1
    balance = params_dict["amount"]  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º balance –∑–¥–µ—Å—å

    while balance > 0 and month_count <= params_dict["term"]:
        payment_date = params_dict.get("payment_date", 8)
        current_date = start_date.replace(day=payment_date) + relativedelta(months=month_count-1)
        is_paid = str(month_count) in payments_dict

        if is_paid:
            payment = payments_dict[str(month_count)]
            status = "‚úÖ –í–Ω–µ—Å—ë–Ω–Ω—ã–π –ø–ª–∞—Ç—ë–∂"
        else:
            remaining_months = params_dict["term"] - month_count + 1
            payment = calculate_monthly_payment(balance, params_dict["rate"], remaining_months)
            status = "üí≠ –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π –ø–ª–∞—Ç—ë–∂"

        interest = (balance * params_dict["rate"] / 100) / 12
        principal_payment = payment - interest

        if balance <= principal_payment:
            payment = balance + interest
            balance = 0
        else:
            balance = balance - principal_payment
        month_name = months[current_date.month - 1]
        response += (
            f"‚îå‚îÄ *{month_name.upper()} {current_date.year}* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
            f"‚îÇ {status}\n"
            f"‚îú‚îÄüí∏ –ü–ª–∞—Ç—ë–∂: *{payment:,.2f}* ‚ÇΩ\n"
            f"‚îú‚îÄüìä –ü—Ä–æ—Ü–µ–Ω—Ç—ã: *{interest:,.2f}* ‚ÇΩ\n"
            f"‚îú‚îÄüí± –û—Å–Ω–æ–≤–Ω–æ–π –¥–æ–ª–≥: *{(payment - interest):,.2f}* ‚ÇΩ\n"
            f"‚îî‚îÄüí∞ –û—Å—Ç–∞—Ç–æ–∫: *{balance:,.2f}* ‚ÇΩ\n\n"
        )

        if balance <= 0:
            break

        month_count += 1

    # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–π —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–µ–π –∏ –æ—Å—Ç–∞—Ç–∫–∞
    total_payments = sum(payment for payment in payments_dict.values())
    total_interest = 0
    initial_balance = params_dict["amount"]
    for m in range(1, params_dict["term"] + 1):
        interest = (initial_balance * params_dict["rate"] / 100) / 12
        total_interest += interest
        if str(m) in payments_dict:
            payment = payments_dict[str(m)]
            initial_balance = initial_balance - (payment - interest)

    # –†–∞—Å—á–µ—Ç –æ—Å—Ç–∞—Ç–∫–∞ –∏ –±—É–¥—É—â–∏—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
    remaining_to_pay = params_dict["amount"]
    actual_interest = 0
    remaining_months = params_dict["term"]

    # –†–∞—Å—á–µ—Ç –¥–ª—è —É–∂–µ –≤–Ω–µ—Å–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
    paid_months = sorted([int(m) for m in payments_dict.keys()])
    for m in paid_months:
        payment = payments_dict[str(m)]
        month_interest = (remaining_to_pay * params_dict["rate"] / 100) / 12
        actual_interest += month_interest
        remaining_to_pay -= (payment - month_interest)
        remaining_months -= 1

    # –î–æ–±–∞–≤–ª—è–µ–º –±—É–¥—É—â–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–ª—è –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –¥–æ–ª–≥–∞
    if remaining_months > 0:
        monthly_rate = (params_dict["rate"] / 100) / 12
        future_interest = remaining_to_pay * monthly_rate * remaining_months

    total_remaining = remaining_to_pay + future_interest
    total_amount = params_dict["amount"] + total_interest

    response += (
        "\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n"
        "‚ïë      üí´ *–ò–¢–û–ì–û*       ‚ïë\n"
        "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n"
        f"‚îú‚îÄ‚úÖ –í–Ω–µ—Å–µ–Ω–æ: *{total_payments:,.2f}* ‚ÇΩ\n"
        f"‚îú‚îÄ‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: *{total_remaining:,.2f}* ‚ÇΩ\n"
        f"‚îú‚îÄüí∞ –û–±—â–∞—è —Å—É–º–º–∞: *{total_amount:,.2f}* ‚ÇΩ\n"
        f"‚îî‚îÄüìä –ü—Ä–æ—Ü–µ–Ω—Ç—ã: *{total_interest:,.2f}* ‚ÇΩ\n"
    )

    return response

def show(message):
    params = db["params"]
    if "payments" not in db:
        db["payments"] = {}

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞—Ä–∏ –≤ –∫–æ—Ä—Ç–µ–∂–∏ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    params_tuple = tuple(sorted(params.items()))
    payments_tuple = tuple(sorted(db["payments"].items()))

    # –ü–æ–ª—É—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    response = calculate_schedule(params_tuple, payments_tuple)
    bot.send_message(message.chat.id, response, parse_mode="Markdown")

@bot.message_handler(func=lambda m: m.text == "‚ôªÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏")
def reset_payments(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
    if str(message.chat.id) != "1175871225":  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        bot.reply_to(message, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π.", reply_markup=create_keyboard())
        return

    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    markup = types.InlineKeyboardMarkup()
    confirm_button = types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–±—Ä–æ—Å", callback_data="confirm_reset")
    cancel_button = types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_reset")
    markup.add(confirm_button, cancel_button)

    warning_text = (
        "‚ö†Ô∏è *–í–ù–ò–ú–ê–ù–ò–ï!*\n\n"
        "–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å *–í–°–ï* –≤–Ω–µ—Å—ë–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏!\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ *–Ω–µ–ª—å–∑—è* –æ—Ç–º–µ–Ω–∏—Ç—å.\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
    )

    bot.reply_to(message, warning_text, parse_mode="Markdown", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data in ["confirm_reset", "cancel_reset"])
def handle_reset_confirmation(call):
    if str(call.message.chat.id) != "1175871225":  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        bot.answer_callback_query(call.id, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
        return

    if call.data == "confirm_reset":
        if "payments" in db:
            db["payments"] = {}
            bot.edit_message_text(
                "‚úÖ –í—Å–µ –≤–Ω–µ—Å—ë–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã!",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=None
            )
            show(call.message)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π –≥—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π
    else:  # cancel_reset
        bot.edit_message_text(
            "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è —Å–±—Ä–æ—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π –æ—Ç–º–µ–Ω–µ–Ω–∞",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=None
        )

    bot.answer_callback_query(call.id)

def create_user_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        "üìä –ì—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π",
    ]
    keyboard.add(*buttons)
    return keyboard

def create_admin_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        types.KeyboardButton("üìä –ì—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π"),
        types.KeyboardButton("üí∞ –í–Ω–µ—Å—Ç–∏ –ø–ª–∞—Ç—ë–∂"),
        types.KeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏"),
        types.KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—Ä–µ–¥–∏—Ç–∞"),
        types.KeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"),
        types.KeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫")
    ]
    keyboard.add(*buttons)
    return keyboard

def create_management_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è",
        "‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è",
        "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π",
        "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–≥–æ",
        "‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–≥–æ",
        "üìã –°–ø–∏—Å–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏—Ö",
        "‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
    ]
    keyboard.add(*[types.KeyboardButton(button) for button in buttons])
    return keyboard

@bot.message_handler(func=lambda m: m.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—Ä–µ–¥–∏—Ç–∞")
def configure_credit(message):
    if str(message.chat.id) != "1175871225":  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        bot.reply_to(message, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—Ä–µ–¥–∏—Ç–∞.")
        return

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞:", reply_markup=keyboard)
    bot.register_next_step_handler(msg, process_amount)

def process_amount(message):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        bot.send_message(message.chat.id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=create_keyboard())
        return
    try:
        amount = int(message.text)
        db["params"]["amount"] = amount
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É (%):", reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add("‚ùå –û—Ç–º–µ–Ω–∞"))
        bot.register_next_step_handler(msg, process_rate)
    except ValueError:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add("‚ùå –û—Ç–º–µ–Ω–∞")
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.", reply_markup=keyboard)
        bot.register_next_step_handler(msg, process_amount)

def process_rate(message):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        bot.send_message(message.chat.id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=create_keyboard())
        return
    try:
        rate = float(message.text)
        db["params"]["rate"] = rate
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ (–≤ –º–µ—Å—è—Ü–∞—Ö):", reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add("‚ùå –û—Ç–º–µ–Ω–∞"))
        bot.register_next_step_handler(msg, process_term)
    except ValueError:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add("‚ùå –û—Ç–º–µ–Ω–∞")
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.", reply_markup=keyboard)
        bot.register_next_step_handler(msg, process_rate)

@bot.callback_query_handler(func=lambda call: call.data.startswith('setname_'))
def handle_setname_button(call):
    if str(call.message.chat.id) != "1175871225":
        bot.answer_callback_query(call.id, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º—ë–Ω")
        return

    user_id = call.data.split('_')[1]
    msg = bot.send_message(
        call.message.chat.id,
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: `{user_id}`\n\n_–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ_ '–æ—Ç–º–µ–Ω–∞'",
        parse_mode="Markdown"
    )
    bot.register_next_step_handler(msg, process_new_name, user_id)

def get_user_name(user_id: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
    return db.get("user_names", {}).get(str(user_id), f"ID: {user_id}")

def process_new_name(message, user_id):
    if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        bot.reply_to(message, "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return

    if "user_names" not in db:
        db["user_names"] = {}

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    new_name = message.text
    db["user_names"][str(user_id)] = new_name

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –≤–æ –≤—Å–µ—Ö —Å–ø–∏—Å–∫–∞—Ö
    update_text = (
        f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è *{new_name}* –¥–ª—è ID: `{user_id}`\n\n"
        "–ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤:\n"
        "‚Ä¢ –°–ø–∏—Å–∫–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        "‚Ä¢ –°–ø–∏—Å–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–∏\n"
        "‚Ä¢ –û–±—â–µ–º —Å–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    )

    bot.reply_to(message, update_text, parse_mode="Markdown")
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
    list_notification_recipients(message)

@bot.callback_query_handler(func=lambda call: call.data.startswith(('approve_', 'reject_')))
def handle_payment_confirmation(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –æ—á–µ—Ä–µ–¥—å
        message_queue.put((process_payment_confirmation, (call,)))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")

def process_payment_confirmation(call):
    try:
        action, payment_id = call.data.split('_', 1)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º maxsplit=1
        if "pending_payments" not in db:
            db["pending_payments"] = {}

        pending_payment = db["pending_payments"].get(payment_id)

        if not pending_payment:
            bot.answer_callback_query(call.id, "‚ùå –ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
            return

        if action == 'approve':
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç—ë–∂
            month = pending_payment["month"]
            amount = pending_payment["amount"]
            from_user = pending_payment["from_user"]

            if "payments" not in db:
                db["payments"] = {}

            db["payments"][str(month)] = amount
            del db["pending_payments"][payment_id]

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
                params = db["params"]
                current_date = datetime.datetime.now() + relativedelta(months=month-1)
                months = ['—è–Ω–≤–∞—Ä—å', '—Ñ–µ–≤—Ä–∞–ª—å', '–º–∞—Ä—Ç', '–∞–ø—Ä–µ–ª—å', '–º–∞–π', '–∏—é–Ω—å',
                         '–∏—é–ª—å', '–∞–≤–≥—É—Å—Ç', '—Å–µ–Ω—Ç—è–±—Ä—å', '–æ–∫—Ç—è–±—Ä—å', '–Ω–æ—è–±—Ä—å', '–¥–µ–∫–∞–±—Ä—å']
                month_name = months[current_date.month - 1]

                # –†–∞—Å—á–µ—Ç –æ—Å—Ç–∞—Ç–∫–∞ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
                balance = params["amount"]
                total_interest = 0
                for m in range(1, month):
                    if str(m) in db["payments"]:
                        payment = db["payments"][str(m)]
                        interest = (balance * params["rate"] / 100) / 12
                        total_interest += interest
                        balance = balance - (payment - interest)

                current_interest = (balance * params["rate"] / 100) / 12
                new_balance = balance - (amount - current_interest)

                payment_info = (
                    "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n"
                    "‚ïë    ‚úÖ –ü–õ–ê–¢–Å–ñ –ü–†–ò–ù–Ø–¢    ‚ïë\n"
                    "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n"
                    f"üìÖ *–ü–µ—Ä–∏–æ–¥:* {month_name} {current_date.year}\n"
                    f"üìä *–ü–ª–∞—Ç—ë–∂ ‚Ññ{month}* –∏–∑ {params['term']}\n\n"
                    "üí∞ *–î–ï–¢–ê–õ–ò –ü–õ–ê–¢–ï–ñ–ê:*\n"
                    f"‚îú‚îÄüíµ –°—É–º–º–∞: *{amount:,}* ‚ÇΩ\n"
                    f"‚îú‚îÄüìà –ü—Ä–æ—Ü–µ–Ω—Ç—ã: *{current_interest:,.2f}* ‚ÇΩ\n"
                    f"‚îî‚îÄüí± –û—Å–Ω–æ–≤–Ω–æ–π –¥–æ–ª–≥: *{(amount - current_interest):,.2f}* ‚ÇΩ\n\n"
                    "üìä *–û–ë–©–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:*\n"
                    f"‚îú‚îÄüí∞ –û—Å—Ç–∞—Ç–æ–∫: *{new_balance:,.2f}* ‚ÇΩ\n"
                    f"‚îî‚îÄ‚úÖ –í—Å–µ–≥–æ –≤–Ω–µ—Å–µ–Ω–æ: *{sum(db['payments'].values()):,}* ‚ÇΩ"
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
                bot.send_message(from_user, payment_info, parse_mode="Markdown")
                # –û—Ç–¥–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                keyboard = create_admin_keyboard() if str(from_user) == "1175871225" else create_user_keyboard()
                bot.send_message(from_user, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–≥–æ
            try:
                # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                bot.edit_message_reply_markup(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    reply_markup=None
                )
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                bot.send_message(
                    call.message.chat.id,
                    payment_info,
                    parse_mode="Markdown"
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        else:  # reject
            # –û—Ç–∫–ª–æ–Ω—è–µ–º –ø–ª–∞—Ç—ë–∂
            from_user = pending_payment["from_user"]
            del db["pending_payments"][payment_id]

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
            try:
                reject_info = (
                    "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n"
                    "‚ïë    ‚ùå –ü–õ–ê–¢–Å–ñ –û–¢–ö–õ–û–ù–Å–ù   ‚ïë\n"
                    "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n"
                    "üìä *–î–ï–¢–ê–õ–ò –ü–õ–ê–¢–ï–ñ–ê:*\n"
                    f"‚îú‚îÄüí∞ –°—É–º–º–∞: *{pending_payment['amount']:,}* ‚ÇΩ\n"
                    f"‚îî‚îÄüìà –ü–ª–∞—Ç—ë–∂ ‚Ññ*{pending_payment['month']}* –∏–∑ {db['params']['term']}"
                )
                bot.send_message(from_user, reject_info, parse_mode="Markdown")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
                bot.edit_message_text(
                    "‚ùå –ü–ª–∞—Ç—ë–∂ –æ—Ç–∫–ª–æ–Ω—ë–Ω!",
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id
                )
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                keyboard = create_admin_keyboard() if str(call.message.chat.id) == "1175871225" else create_user_keyboard()
                bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}", exc_info=True)
        try:
            bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞")
        except:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ")

def process_term(message):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        bot.send_message(message.chat.id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=create_keyboard())
        return
    try:
        term = int(message.text)
        if term <= 0 or term > TERM_MONTHS:
            msg = bot.send_message(message.chat.id, f"–°—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ {TERM_MONTHS} –º–µ—Å—è—Ü–µ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:", reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add("‚ùå –û—Ç–º–µ–Ω–∞"))
            bot.register_next_step_handler(msg, process_term)
            return
        db["params"]["term"] = term
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 28):", reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add("‚ùå –û—Ç–º–µ–Ω–∞"))
        bot.register_next_step_handler(msg, process_payment_date)
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        process_rate(message)

def process_payment_date(message):
    try:
        payment_date = int(message.text)
        if 1 <= payment_date <= 28:
            db["params"]["payment_date"] = payment_date
            bot.send_message(message.chat.id, "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫—Ä–µ–¥–∏—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã!", reply_markup=create_keyboard())
            show(message)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        else:
            msg = bot.send_message(message.chat.id, "–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 28. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            bot.register_next_step_handler(msg, process_payment_date)
    except ValueError:
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 28:")
        bot.register_next_step_handler(msg, process_payment_date)


def main():
    try:
        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        if not TOKEN:
            raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        if "user_names" not in db:
            db["user_names"] = {}
        db["user_names"]["1175871225"] = "–ï–≤–≥–µ–Ω–∏–π"

        logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:")
        logger.info(f"- –°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞: {CREDIT_AMOUNT:,} —Ä—É–±.")
        logger.info(f"- –°—Ç–∞–≤–∫–∞: {INTEREST_RATE}%")
        logger.info(f"- –°—Ä–æ–∫: {TERM_MONTHS} –º–µ—Å—è—Ü–µ–≤")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        init_database()

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        bot.infinity_polling(timeout=60, long_polling_timeout=30)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)
        sys.exit(1)

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    default_structure = {
        "payments": {},
        "users": {},
        "params": {
            "amount": CREDIT_AMOUNT,
            "rate": INTEREST_RATE,
            "term": TERM_MONTHS,
            "payment_date": 8
        },
        "payment_approvers": [],
        "pending_payments": {},
        "user_names": {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    }

    for key, default_value in default_structure.items():
        if key not in db:
            db[key] = default_value

    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

def parse_receipt(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —á–µ–∫–∞ T-Bank"""
    try:
        lines = text.split('\n')
        receipt_data = {
            'amount': None,
            'date': None,
            'status': None,
            'sender': None,
            'phone': None,
            'full_text': text
        }
        
        for i, line in enumerate(lines):
            line = line.strip()
            
            # –ü–æ–∏—Å–∫ —Å—É–º–º—ã (–ø–æ—Å–ª–µ —Å–ª–æ–≤–∞ "–°—É–º–º–∞")
            if '—Å—É–º–º–∞' in line.lower():
                # –ò—â–µ–º —á–∏—Å–ª–æ –≤ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ –∏–ª–∏ –ø–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–∏—è
                amount_str = ''
                if ':' in line:
                    amount_str = line.split(':')[1]
                elif i + 1 < len(lines):
                    amount_str = lines[i + 1]
                    
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–∞
                amount_str = ''.join(c for c in amount_str if c.isdigit() or c in '., ')
                if amount_str:
                    receipt_data['amount'] = float(amount_str.replace(',', '.').replace(' ', ''))
            
            # –ü–æ–∏—Å–∫ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.mm.yyyy
            if line.count('.') == 2 and len(line) >= 8:
                date_parts = line.split()
                for part in date_parts:
                    if part.count('.') == 2 and all(c.isdigit() or c == '.' for c in part):
                        receipt_data['date'] = part
                        break
            
            # –ü–æ–∏—Å–∫ —Å—Ç–∞—Ç—É—Å–∞
            if '—Å—Ç–∞—Ç—É—Å' in line.lower():
                if ':' in line:
                    receipt_data['status'] = line.split(':')[1].strip()
                elif i + 1 < len(lines):
                    receipt_data['status'] = lines[i + 1].strip()
            
            # –ü–æ–∏—Å–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            if '–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å' in line.lower():
                if ':' in line:
                    receipt_data['sender'] = line.split(':')[1].strip()
                elif i + 1 < len(lines):
                    receipt_data['sender'] = lines[i + 1].strip()
            
            # –ü–æ–∏—Å–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            if '—Ç–µ–ª–µ—Ñ–æ–Ω' in line.lower():
                next_line = lines[i + 1] if i + 1 < len(lines) else ''
                phone = next_line.strip() if ':' not in line else line.split(':')[1].strip()
                if phone and ('+' in phone or phone.replace(' ', '').isdigit()):
                    receipt_data['phone'] = phone
        
        return receipt_data
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–µ–∫–∞: {e}")
        return None

def recognize_text_with_tesseract(image_bytes):
    """–†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å –ø–æ–º–æ—â—å—é Tesseract OCR"""
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –±–∞–π—Ç–æ–≤
        image = Image.open(io.BytesIO(image_bytes))
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        custom_config = r'--oem 3 --psm 6 -l rus+eng'
        
        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç
        text = pytesseract.image_to_string(image, config=custom_config)
        
        # –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —á–µ–∫–∞
        receipt_info = parse_receipt(text)
        
        return receipt_info
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}")
        return None

@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Ñ–æ—Ç–æ
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        
        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç
        receipt_info = recognize_text_with_tesseract(downloaded_file)
        
        if receipt_info and receipt_info['amount']:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–µ–∫–µ
            receipt_text = "üßæ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ —á–µ–∫–∞:*\n"
            if receipt_info['amount']:
                receipt_text += f"‚îú‚îÄüí∞ –°—É–º–º–∞: *{receipt_info['amount']:,.2f}* ‚ÇΩ\n"
            if receipt_info['date']:
                receipt_text += f"‚îú‚îÄüìÖ –î–∞—Ç–∞: *{receipt_info['date']}*\n"
            if receipt_info['status']:
                receipt_text += f"‚îú‚îÄ‚úÖ –°—Ç–∞—Ç—É—Å: *{receipt_info['status']}*\n"
            if receipt_info['sender']:
                receipt_text += f"‚îú‚îÄüë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: *{receipt_info['sender']}*\n"
            if receipt_info['phone']:
                receipt_text += f"‚îî‚îÄüì± –¢–µ–ª–µ—Ñ–æ–Ω: *{receipt_info['phone']}*\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            markup = types.InlineKeyboardMarkup()
            confirm_button = types.InlineKeyboardButton("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –ø–ª–∞—Ç—ë–∂", 
                                                      callback_data=f"use_receipt_{receipt_info['amount']}")
            markup.add(confirm_button)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
            bot.reply_to(message, receipt_text, parse_mode="Markdown", reply_markup=markup)
            
        else:
            bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —á–µ–∫–µ.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('use_receipt_'))
def handle_receipt_confirmation(call):
    try:
        amount = float(call.data.split('_')[2])
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –º–µ—Å—è—Ü
        params = db["params"]
        next_month = 1
        while str(next_month) in db["payments"] and next_month <= params["term"]:
            next_month += 1
            
        if next_month > params["term"]:
            bot.answer_callback_query(call.id, "‚ùå –í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ —É–∂–µ –≤–Ω–µ—Å–µ–Ω—ã!")
            return
            
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂
        payment_id = f"{call.message.chat.id}_{next_month}"
        if "pending_payments" not in db:
            db["pending_payments"] = {}
            
        db["pending_payments"][payment_id] = {
            "amount": amount,
            "month": next_month,
            "from_user": call.message.chat.id,
            "status": "pending",
            "receipt_photo": call.message.reply_to_message.photo[-1].file_id
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        for approver_id in db.get("payment_approvers", []):
            markup = types.InlineKeyboardMarkup()
            approve_button = types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", 
                                                      callback_data=f"approve_{payment_id}")
            reject_button = types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", 
                                                     callback_data=f"reject_{payment_id}")
            markup.add(approve_button, reject_button)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —á–µ–∫–∞
            bot.send_photo(approver_id, 
                         call.message.reply_to_message.photo[-1].file_id,
                         caption=f"üìù –ü–ª–∞—Ç—ë–∂ –Ω–∞ —Å—É–º–º—É *{amount:,.2f}* ‚ÇΩ",
                         parse_mode="Markdown",
                         reply_markup=markup)
            
        bot.answer_callback_query(call.id, "‚úÖ –ü–ª–∞—Ç—ë–∂ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ!")
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ–∫–∞: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

if __name__ == "__main__":
    main()