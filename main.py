import os
import sys
import logging
import queue
import threading
import time
from functools import lru_cache
from typing import Dict, List, Optional, Tuple
from collections import defaultdict
from dataclasses import dataclass
import datetime
from dateutil.relativedelta import relativedelta
import pytesseract
from PIL import Image
import io
import telebot
from telebot import types
from replit import db
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
class Config:
    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    BOT_TOKEN = os.getenv('BOT_TOKEN')
    ADMIN_ID = os.getenv('ADMIN_ID', '1175871225')
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫—Ä–µ–¥–∏—Ç–∞
    CREDIT_AMOUNT = int(os.getenv('DEFAULT_CREDIT_AMOUNT', '1500000'))
    INTEREST_RATE = float(os.getenv('DEFAULT_INTEREST_RATE', '10'))
    TERM_MONTHS = int(os.getenv('DEFAULT_TERM_MONTHS', '12'))
    PAYMENT_DAY = int(os.getenv('DEFAULT_PAYMENT_DAY', '8'))
    MIN_PAYMENT = int(os.getenv('MIN_PAYMENT', '30000'))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Tesseract OCR
    TESSERACT_CONFIG = r'--oem 3 --psm 6 -l rus+eng'
    TESSERACT_PATH = os.getenv('TESSERACT_PATH')
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    CACHE_TIMEOUT = int(os.getenv('CACHE_TIMEOUT', '300'))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    LOG_LEVEL = os.getenv('LOG_LEVEL', 'INFO')
    LOG_FILE = os.getenv('LOG_FILE')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
if not Config.BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Tesseract
if Config.TESSERACT_PATH:
    pytesseract.pytesseract.tesseract_cmd = Config.TESSERACT_PATH

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=Config.LOG_LEVEL,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filename=Config.LOG_FILE,
    filemode='a' if Config.LOG_FILE else None
)
logger = logging.getLogger(__name__)

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
@dataclass
class CreditParams:
    amount: int
    rate: float
    term: int
    payment_date: int

@dataclass
class PaymentInfo:
    amount: float
    date: Optional[str] = None
    status: Optional[str] = None
    sender: Optional[str] = None
    phone: Optional[str] = None
    raw_text: Optional[str] = None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(Config.BOT_TOKEN)
message_queue = queue.Queue()
cache = defaultdict(dict)

# –†—É—Å—Å–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
HOLIDAYS = [
    (1, 1), (1, 2), (1, 7), (2, 23), (3, 8),
    (5, 1), (5, 9), (6, 12), (11, 4)
]

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def is_admin(user_id: str) -> bool:
    return str(user_id) == Config.ADMIN_ID

def get_month_name(month_num: int) -> str:
    months = [
        '—è–Ω–≤–∞—Ä—å', '—Ñ–µ–≤—Ä–∞–ª—å', '–º–∞—Ä—Ç', '–∞–ø—Ä–µ–ª—å', '–º–∞–π', '–∏—é–Ω—å',
        '–∏—é–ª—å', '–∞–≤–≥—É—Å—Ç', '—Å–µ–Ω—Ç—è–±—Ä—å', '–æ–∫—Ç—è–±—Ä—å', '–Ω–æ—è–±—Ä—å', '–¥–µ–∫–∞–±—Ä—å'
    ]
    return months[month_num - 1]

def format_money(amount: float) -> str:
    return f"{amount:,.2f}".replace(",", " ").replace(".", ",")

def is_holiday(date: datetime.date) -> bool:
    return date.weekday() >= 5 or (date.month, date.day) in HOLIDAYS

def get_previous_workday(date: datetime.date) -> datetime.date:
    while True:
        date -= datetime.timedelta(days=1)
        if not is_holiday(date):
            return date

# –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def init_database():
    default_structure = {
        "payments": {},
        "users": {},
        "params": {
            "amount": Config.CREDIT_AMOUNT,
            "rate": Config.INTEREST_RATE,
            "term": Config.TERM_MONTHS,
            "payment_date": Config.PAYMENT_DAY
        },
        "payment_approvers": [],
        "pending_payments": {},
        "user_names": {},
        "notify_users": []
    }

    for key, value in default_structure.items():
        if key not in db:
            db[key] = value

def get_credit_params() -> CreditParams:
    params = db["params"]
    return CreditParams(
        amount=params["amount"],
        rate=params["rate"],
        term=params["term"],
        payment_date=params["payment_date"]
    )

def get_user_name(user_id: str) -> str:
    return db.get("user_names", {}).get(str(user_id), f"ID: {user_id}")

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_keyboard(is_admin_user: bool = False) -> types.ReplyKeyboardMarkup:
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = ["üìä –ì—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π"]
    
    if is_admin_user:
        buttons.extend([
            "üí∞ –í–Ω–µ—Å—Ç–∏ –ø–ª–∞—Ç—ë–∂",
            "‚ôªÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏",
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—Ä–µ–¥–∏—Ç–∞",
            "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
            "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫"
        ])
    
    keyboard.add(*buttons)
    return keyboard

def create_management_keyboard() -> types.ReplyKeyboardMarkup:
    buttons = [
        "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è",
        "‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è",
        "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π",
        "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–≥–æ",
        "‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–≥–æ",
        "üìã –°–ø–∏—Å–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏—Ö",
        "‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
    ]
    return types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2).add(*buttons)

# –†–∞—Å—á–µ—Ç—ã –ø–ª–∞—Ç–µ–∂–µ–π
@lru_cache(maxsize=128)
def calculate_monthly_payment(principal: float, annual_rate: float, months: int) -> float:
    if months <= 0:
        return 0
    
    monthly_rate = (annual_rate / 100) / 12
    payment = principal * (monthly_rate * (1 + monthly_rate)**months) / ((1 + monthly_rate)**months - 1)
    return round(payment, 2)

def calculate_payment_schedule(params: CreditParams, payments: Dict[str, float]) -> Tuple[List[Dict], float, float]:
    schedule = []
    balance = params.amount
    total_interest = 0
    total_paid = 0
    
    for month in range(1, params.term + 1):
        is_paid = str(month) in payments
        payment = payments[str(month)] if is_paid else calculate_monthly_payment(balance, params.rate, params.term - month + 1)
        interest = (balance * params.rate / 100) / 12
        principal = payment - interest
        
        if balance <= principal:
            payment = balance + interest
            principal = balance
            balance = 0
        else:
            balance -= principal
        
        total_interest += interest
        total_paid += payment
        
        schedule.append({
            "month": month,
            "payment": payment,
            "interest": interest,
            "principal": principal,
            "balance": balance,
            "is_paid": is_paid
        })
        
        if balance <= 0:
            break
    
    return schedule, total_paid, total_interest

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start', 'help'])
def handle_start(message: types.Message):
    init_database()
    user_id = str(message.chat.id)
    
    if user_id not in db["users"]:
        db["users"][user_id] = {"notify": True}
    
    text = """
üè¶ *–ö–†–ï–î–ò–¢–ù–´–ô –ê–°–°–ò–°–¢–ï–ù–¢* üè¶

üì± *–î–û–°–¢–£–ü–ù–´–ï –§–£–ù–ö–¶–ò–ò:*
üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –≥—Ä–∞—Ñ–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
üí∏ –í–Ω–µ—Å–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫—Ä–µ–¥–∏—Ç–∞
üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
"""
    bot.send_message(
        message.chat.id,
        text,
        parse_mode="Markdown",
        reply_markup=create_keyboard(is_admin(user_id))
    )

@bot.message_handler(commands=['id'])
def handle_id_command(message: types.Message):
    bot.reply_to(message, f"üÜî –í–∞—à ID: `{message.chat.id}`", parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
@bot.message_handler(func=lambda m: m.text == "üí∞ –í–Ω–µ—Å—Ç–∏ –ø–ª–∞—Ç—ë–∂")
def handle_payment_request(message: types.Message):
    if not is_admin(message.chat.id):
        bot.reply_to(message, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π.")
        return
    
    params = get_credit_params()
    next_month = 1
    while str(next_month) in db["payments"] and next_month <= params.term:
        next_month += 1
    
    if next_month > params.term:
        bot.reply_to(message, "‚úÖ –í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ —É–∂–µ –≤–Ω–µ—Å–µ–Ω—ã!")
        return
    
    payment_date = datetime.datetime.now() + relativedelta(months=next_month-1)
    month_name = get_month_name(payment_date.month)
    
    msg = bot.reply_to(
        message,
        f"üí∞ *–ü–ª–∞—Ç—ë–∂ –∑–∞ {month_name} {payment_date.year}*\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (–º–∏–Ω–∏–º—É–º {Config.MIN_PAYMENT:,} —Ä—É–±.):",
        parse_mode="Markdown",
        reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add("‚ùå –û—Ç–º–µ–Ω–∞")
    )
    bot.register_next_step_handler(msg, process_payment_input, next_month)

def process_payment_input(message: types.Message, month: int):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        bot.send_message(
            message.chat.id,
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=create_keyboard(is_admin(message.chat.id)))
        )
        return
    
    try:
        amount = float(message.text.replace(',', '.'))
        params = get_credit_params()
        
        # –†–∞—Å—á–µ—Ç –æ—Å—Ç–∞—Ç–∫–∞
        balance = params.amount
        for m in range(1, month):
            if str(m) in db["payments"]:
                payment = db["payments"][str(m)]
                interest = (balance * params.rate / 100) / 12
                balance -= (payment - interest)
        
        monthly_interest = (balance * params.rate / 100) / 12
        max_payment = balance + monthly_interest
        
        if amount < Config.MIN_PAYMENT or amount > max_payment:
            msg = bot.reply_to(
                message,
                f"‚ö†Ô∏è –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç {Config.MIN_PAYMENT:,} –¥–æ {max_payment:,.0f} —Ä—É–±.",
                parse_mode="Markdown"
            )
            bot.register_next_step_handler(msg, process_payment_input, month)
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–∂–∏–¥–∞—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        payment_id = f"{message.chat.id}_{month}"
        db.setdefault("pending_payments", {})[payment_id] = {
            "amount": amount,
            "month": month,
            "from_user": message.chat.id,
            "timestamp": time.time(),
            "status": "pending"
        }
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏—Ö
        notify_payment_approvers(payment_id, amount, month)
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
        payment_date = datetime.datetime.now() + relativedelta(months=month-1)
        bot.reply_to(
            message,
            f"‚úÖ –ü–ª–∞—Ç—ë–∂ –Ω–∞ {amount:,} —Ä—É–±. –∑–∞ {get_month_name(payment_date.month)} "
            f"–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ!",
            reply_markup=create_keyboard(is_admin(message.chat.id)))
    except ValueError:
        msg = bot.reply_to(message, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É")
        bot.register_next_step_handler(msg, process_payment_input, month)

def notify_payment_approvers(payment_id: str, amount: float, month: int):
    params = get_credit_params()
    payment_date = datetime.datetime.now() + relativedelta(months=month-1)
    month_name = get_month_name(payment_date.month)
    
    # –†–∞—Å—á–µ—Ç –¥–µ—Ç–∞–ª–µ–π –ø–ª–∞—Ç–µ–∂–∞
    balance = params.amount
    for m in range(1, month):
        if str(m) in db["payments"]:
            payment = db["payments"][str(m)]
            interest = (balance * params.rate / 100) / 12
            balance -= (payment - interest)
    
    interest = (balance * params.rate / 100) / 12
    new_balance = balance - (amount - interest)
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    text = (
        f"üí∞ *–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞*\n\n"
        f"‚Ä¢ –ú–µ—Å—è—Ü: *{month_name} {payment_date.year}*\n"
        f"‚Ä¢ –°—É–º–º–∞: *{amount:,}* —Ä—É–±.\n"
        f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç—ã: *{interest:,.2f}* —Ä—É–±.\n"
        f"‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫ –ø–æ—Å–ª–µ: *{new_balance:,.2f}* —Ä—É–±.\n\n"
        f"–û—Ç: {get_user_name(db['pending_payments'][payment_id]['from_user'])}"
    )
    
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_{payment_id}"),
        types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{payment_id}")
    )
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–º
    for approver_id in db.get("payment_approvers", []):
        try:
            bot.send_message(
                int(approver_id),
                text,
                reply_markup=markup,
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–º—É {approver_id}: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —á–µ–∫–æ–≤
@bot.message_handler(content_types=['photo'])
def handle_receipt_photo(message: types.Message):
    try:
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        receipt_info = parse_receipt_text(downloaded_file)
        
        if receipt_info and receipt_info.amount:
            show_receipt_confirmation(message, receipt_info)
        else:
            bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—É–º–º—É –≤ —á–µ–∫–µ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ–∫–∞: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

def parse_receipt_text(image_bytes: bytes) -> Optional[PaymentInfo]:
    try:
        image = Image.open(io.BytesIO(image_bytes))
        text = pytesseract.image_to_string(image, config=Config.TESSERACT_CONFIG)
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
        amount = None
        date = None
        
        for line in text.split('\n'):
            line = line.lower().strip()
            if '—Å—É–º–º–∞' in line and not amount:
                parts = line.replace(',', '.').split()
                for part in parts:
                    if part.replace('.', '').isdigit():
                        amount = float(part)
                        break
            
            if not date and (line.count('.') == 2 or line.count('/') == 2):
                date_part = line.split()[0] if ' ' in line else line
                if any(c.isdigit() for c in date_part):
                    date = date_part
        
        return PaymentInfo(
            amount=amount,
            date=date,
            raw_text=text
        ) if amount else None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ OCR: {e}")
        return None

def show_receipt_confirmation(message: types.Message, receipt: PaymentInfo):
    text = [
        "üßæ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ —á–µ–∫–∞:*",
        f"üí∞ –°—É–º–º–∞: *{format_money(receipt.amount)}* ‚ÇΩ"
    ]
    
    if receipt.date:
        text.append(f"üìÖ –î–∞—Ç–∞: *{receipt.date}*")
    
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton(
            "‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –ø–ª–∞—Ç—ë–∂",
            callback_data=f"use_receipt_{receipt.amount}"
        )
    )
    
    bot.reply_to(
        message,
        "\n".join(text),
        parse_mode="Markdown",
        reply_markup=markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@bot.callback_query_handler(func=lambda call: call.data.startswith(('approve_', 'reject_')))
def handle_payment_decision(call: types.CallbackQuery):
    action, payment_id = call.data.split('_', 1)
    pending_payments = db.get("pending_payments", {})
    
    if payment_id not in pending_payments:
        bot.answer_callback_query(call.id, "‚ùå –ü–ª–∞—Ç—ë–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
        return
    
    payment_data = pending_payments[payment_id]
    
    if action == 'approve':
        approve_payment(call, payment_id, payment_data)
    else:
        reject_payment(call, payment_id, payment_data)
    
    bot.answer_callback_query(call.id)

def approve_payment(call: types.CallbackQuery, payment_id: str, payment_data: dict):
    month = str(payment_data["month"])
    amount = payment_data["amount"]
    from_user = payment_data["from_user"]
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
    db.setdefault("payments", {})[month] = amount
    del db["pending_payments"][payment_id]
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    payment_date = datetime.datetime.now() + relativedelta(months=int(month)-1)
    bot.send_message(
        from_user,
        f"‚úÖ –í–∞—à –ø–ª–∞—Ç—ë–∂ –Ω–∞ {amount:,} —Ä—É–±. –∑–∞ {get_month_name(payment_date.month)} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!",
        reply_markup=create_keyboard(is_admin(from_user))
    )
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–º—É
    try:
        bot.edit_message_text(
            f"‚úÖ –ü–ª–∞—Ç—ë–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω: {amount:,} —Ä—É–±.",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def reject_payment(call: types.CallbackQuery, payment_id: str, payment_data: dict):
    from_user = payment_data["from_user"]
    amount = payment_data["amount"]
    month = payment_data["month"]
    
    del db["pending_payments"][payment_id]
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    payment_date = datetime.datetime.now() + relativedelta(months=month-1)
    bot.send_message(
        from_user,
        f"‚ùå –í–∞—à –ø–ª–∞—Ç—ë–∂ –Ω–∞ {amount:,} —Ä—É–±. –∑–∞ {get_month_name(payment_date.month)} –æ—Ç–∫–ª–æ–Ω—ë–Ω",
        reply_markup=create_keyboard(is_admin(from_user))
    )
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–º—É
    try:
        bot.edit_message_text(
            f"‚ùå –ü–ª–∞—Ç—ë–∂ –æ—Ç–∫–ª–æ–Ω—ë–Ω: {amount:,} —Ä—É–±.",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –±–æ—Ç–∞...")
    init_database()
    
    # –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    threading.Thread(target=process_message_queue, daemon=True).start()
    
    try:
        bot.infinity_polling()
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        sys.exit(1)
